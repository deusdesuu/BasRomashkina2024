// Мячин Валентин БАС2
#include <iostream>
#include <locale>

/*
 * Идея:
 * В начале списка будет находиться пустой элемент без значения
 * Со ссылкой на первый элемент списка
 * Т.к. если не использовать такой "нулевой" элемент
 * То придется придумывать как определять что список пуст
 * Также это сильно упрощает написание кода
 */

struct Node {
	int value;
	Node* next = nullptr;
};
void add(Node*, int);
void add_several(Node*);
void print(Node*);
void delete_first(Node*);
void delete_first2(Node*);
float arithmetic_mean(Node*);

int main() {
	setlocale(LC_ALL, "rus");

	Node* node = new(Node); // инициализация первого элемента списка
	int choice;
	bool flag = true; // Проверка на завершение программы

	// Диалог
	while (flag) {
		std::cout << "Выберите действие:\n";
		std::cout << "\t1. Добавление элементов в список\n";
		std::cout << "\t2. Удаление первых 2-ух элементов из списка\n";
		std::cout << "\t3. Нахождение среднего арифметического элементов списка\n";
		std::cout << "\t4. Вывод списка на экран\n";
		std::cout << "\t5. Завершить выполнение программы\n";
		std::cout << "Выбранное действие: "; std::cin >> choice;

		switch (choice) {
		case(1):
			add_several(node);
			std::cout << "\nТекущие элементы списка:\n";
			print(node);
			break;
		case(2):
			delete_first2(node);
			std::cout << "\nПервые 2 элемента списка были удалены\n";
			std::cout << "Текущие элементы списка:\n";
			print(node);
			break;
		case(3):
			std::cout << "\nСреднее арифметическое элементов списка: ";
			std::cout << arithmetic_mean(node) << "\n" << std::endl;
			break;
		case(4):
			std::cout << "\nТекущие элементы списка:\n";
			print(node);
			break;
		case(5):
			flag = false;
			break;
		default: continue;
		}
		std::cout << "---------------------------------------------------------------" << std::endl;
	}
	
	// писать delete(node) нет смысла
	// т.к. добавлять в структуру ничего нельзя
	// соответственно деструктор класса неопределен

	return 0;
}
void add(Node* node, int value) {
	/*
	 * Идем по списку, пока указатель на следующий
	 * Элемент не будет нулевым
	 * Создаем новый элемент с указанным значением
	 * Меняем указатель последнего элемента на следующий
	 * На созданный
	 */
	Node* current = node;
	while ((*current).next != nullptr) {
		current = (*current).next;
	}
	Node* new_node = new(Node);
	(*new_node).value = value;
	(*current).next = new_node;
}
void print(Node* node) {
	/*
	 * Пока указатель на элемент списка ненулевой
	 * Выводим значение элемента и адреса в консоль
	 */
	if ((*node).next == nullptr) {
		std::cout << "Список пуст!\n" << std::endl;
	}
	else {
		std::cout << "Значение\tАдрес\t\t\tАдрес следующего\n";
		Node* current = (*node).next;
		while (current != nullptr) {
			std::cout << (*current).value << "\t\t" << current << "\t" << (*current).next << '\n';
			current = (*current).next;
		}
		std::cout << std::endl;
	}
}
void delete_first(Node* node) {
	/*
	* Если список пустой, то не делаем ничего
	* (можно сделать raise exception)
	* Иначе подтягиваем значение и указатель из первого элемента в нулевой
	* Освобождаем память из под 1-го элемента
	*/
	if ((*node).next == nullptr) {}
	else {
		(*node).value = (*(*node).next).value;
		Node* tmp = (*node).next;
		(*node).next = (*(*node).next).next;
		delete(tmp);
	}
}
void delete_first2(Node* node) {
	// 2 удаления первого элемента
	delete_first(node);
	delete_first(node);
}
float arithmetic_mean(Node* node) {
	if ((*node).next == nullptr) { return 0.0; }
	/*
	 * Пока указатель на элемент списка ненулевой
	 * Считаем сумму и количество
	 * В конце считаем и возвращаем среднее арифметическое
	 */
	Node* current = (*node).next;
	int sum = 0,
		amount = 0;
	while (current != nullptr) {
		sum += (*current).value;
		++amount;
		current = (*current).next;
	}
	float result = static_cast<float>(sum) / amount;
	return result; 
}
void add_several(Node* node) {
	/*
	 * Получаем из консоли количество элементов и сами элементы
	 * И добавляем их в список через add(Node*)
	 */
	int n, value;
	std::cout << "\nВведите количество элементов списка: "; std::cin >> n;
	std::cout << "Введите " << n << " элементов списка:\n";
	for (int i = 0; i < n; ++i) {
		std::cin >> value;
		add(node, value);
	}
}
/*
Test:

Выберите действие:
		1. Добавление элементов в список
		2. Удаление первых 2-ух элементов из списка
		3. Нахождение среднего арифметического элементов списка
		4. Вывод списка на экран
		5. Завершить выполнение программы
Выбранное действие: 1

Введите количество элементов списка: 5
Введите 5 элементов списка:
1 2 3 4 4

Текущие элементы списка:
Значение        Адрес                   Адрес следующего
1               000002C02B631DF0        000002C02B631E90
2               000002C02B631E90        000002C02B631B20
3               000002C02B631B20        000002C02B631B70
4               000002C02B631B70        000002C02B632660
4               000002C02B632660        0000000000000000

---------------------------------------------------------------
Выберите действие:
		1. Добавление элементов в список
		2. Удаление первых 2-ух элементов из списка
		3. Нахождение среднего арифметического элементов списка
		4. Вывод списка на экран
		5. Завершить выполнение программы
Выбранное действие: 2

Первые 2 элемента списка были удалены
Текущие элементы списка:
Значение        Адрес                   Адрес следующего
3               000002C02B631B20        000002C02B631B70
4               000002C02B631B70        000002C02B632660
4               000002C02B632660        0000000000000000

---------------------------------------------------------------
Выберите действие:
		1. Добавление элементов в список
		2. Удаление первых 2-ух элементов из списка
		3. Нахождение среднего арифметического элементов списка
		4. Вывод списка на экран
		5. Завершить выполнение программы
Выбранное действие: 3

Среднее арифметическое элементов списка: 3.66667

---------------------------------------------------------------
Выберите действие:
		1. Добавление элементов в список
		2. Удаление первых 2-ух элементов из списка
		3. Нахождение среднего арифметического элементов списка
		4. Вывод списка на экран
		5. Завершить выполнение программы
Выбранное действие: 4

Текущие элементы списка:
Значение        Адрес                   Адрес следующего
3               000002C02B631B20        000002C02B631B70
4               000002C02B631B70        000002C02B632660
4               000002C02B632660        0000000000000000

---------------------------------------------------------------
Выберите действие:
		1. Добавление элементов в список
		2. Удаление первых 2-ух элементов из списка
		3. Нахождение среднего арифметического элементов списка
		4. Вывод списка на экран
		5. Завершить выполнение программы
Выбранное действие: 5
---------------------------------------------------------------
*/
