// Мячин Валентин БАС2
#include <iostream>
#include <locale>


void print(int* mas, int n) {
    for (int i = 0; i < n; ++i) {
        std::cout << mas[i] << ' ';
    }
    std::cout << std::endl;
}
void fill_worst(int* mas, int n) {
    for (int i = 0; i < n; ++i) {
        mas[i] = n - i;
    }
}
void fill_best(int* mas, int n) {
    for (int i = 0; i < n; ++i) {
        mas[i] = i + 1;
    }
}
void fill_avg(int* mas, int n) {
    std::srand(std::time(nullptr));
    for (int i = 0; i < n; ++i) {
        mas[i] = rand() % 19 - 9;
    }
}
void SquareSelectionSort(int* A, int n) {
    int m = 0, c = 0;

    int sqrtN = sqrt(n);
    // tail нам нужен в случаях
    // Когда массив нельзя ровно поделить
    // На sqrt N и у нас остается хвост
    bool tail = (n % sqrtN) > 0;

    int Bn = n / sqrtN + tail;
    int* B = new int[Bn];
    int* C = new int[n];
    
    int Ci = 0;
    int Bi = 0;
    
    int minB;
    int minBi;
    int BiToChange;
    // Заведем максимум на который будем менять
    // Переменные, которые достали из массива
    int max = A[0];
    for (int i = 1; i < n; ++i) {
        ++c;
        if (A[i] > max) {
            max = A[i];
        }
    }
    // Сделаем его на единицу больше
    // Чтобы не спутать с элементами массива А
    ++max;

    // Заполняем вспомогательный массив В
    ++m;
    minB = A[0];
    minBi = 0;
    for (int i = 0; i < n; ++i) {
        ++c;
        if (A[i] < minB) {
            minB = A[i];
            minBi = i;
            ++m;
        }
        if (!((i + 1) % sqrtN)) {
            B[Bi++] = minB;
            minB = A[++i];
            m += 2;
            minBi = i;
        }
    }
    if (tail) {
        B[Bi++] = minB;
        ++m;
    }
    std::cout << "\nA:\t"; print(A, n);
    std::cout << "B:\t"; print(B, Bn);
    std::cout << "C:\t"; print(C, n);

    for (int j = 0; j < n; ++j) {
        // Ищем минимальный элемент в В
        ++m;
        minB = B[0];
        minBi = 0;
        for (int i = 1; i < Bn; ++i) {
            ++c;
            if (B[i] < minB) {
                ++m;
                minB = B[i];
                minBi = i;
            }
        }
        // Добавляем элемент в С
        C[Ci++] = minB;
        ++m;

        // Заменяем наш минимум на max
        for (int i = minBi * sqrtN; (i < (minBi + 1) * sqrtN) && (i < n); ++i) {
            ++c;
            if (A[i] == minB) {
                ++m;
                A[i] = max;
                break;
            }
        }
        // Находим новый минимум для группы
        BiToChange = minBi;
        ++m;
        minB = A[minBi * sqrtN];
        minBi = minBi * sqrtN;
        for (int i = BiToChange * sqrtN + 1; (i < (BiToChange + 1) * sqrtN) && (i < n); ++i) {
            ++c;
            if (A[i] < minB) {
                ++m;
                minB = A[i];
                minBi = i;
            }
        }
        B[BiToChange] = minB;
        ++m;
        std::cout << "---------------------------------------\n";
        std::cout << "A:\t"; print(A, n);
        std::cout << "B:\t"; print(B, Bn);
        std::cout << "C:\t"; print(C, n);
    }
    // Копируем С в А
    for (int i = 0; i < n; ++i) {
        A[i] = C[i];
        ++m;
    }
    std::cout << "Количество сравнений: " << c << std::endl;
    std::cout << "Количество перемещений: " << m << std::endl;
    delete[] B;
    delete[] C;
}
int main() {
    setlocale(LC_ALL, "rus");
    int n; std::cout << "n  = "; std::cin >> n;
    int* mas = new int[n];

    fill_best(mas, n);
    std::cout << "\nИсходный массив в лучшем случае:\n\t"; print(mas, n);
    SquareSelectionSort(mas, n);
    std::cout << "Результат работы сортировки:\n\t"; print(mas, n);

    std::cout << "\n-----------------------------------------------\n";

    fill_worst(mas, n);
    std::cout << "\nИсходный массив в худшем случае:\n\t"; print(mas, n);
    SquareSelectionSort(mas, n);
    std::cout << "Результат работы сортировки:\n\t"; print(mas, n);

    std::cout << "\n-----------------------------------------------\n";

    fill_avg(mas, n);
    std::cout << "\nИсходный массив в среднем случае:\n\t"; print(mas, n);
    SquareSelectionSort(mas, n);
    std::cout << "Результат работы сортировки:\n\t"; print(mas, n);

    delete[] mas;
    return 0;
}
/*
Test:

n  = 10

Исходный массив в лучшем случае:
        1 2 3 4 5 6 7 8 9 10

A:      1 2 3 4 5 6 7 8 9 10
B:      1 4 7 10
C:      -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      11 2 3 4 5 6 7 8 9 10
B:      2 4 7 10
C:      1 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      11 11 3 4 5 6 7 8 9 10
B:      3 4 7 10
C:      1 2 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      11 11 11 4 5 6 7 8 9 10
B:      11 4 7 10
C:      1 2 3 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      11 11 11 11 5 6 7 8 9 10
B:      11 5 7 10
C:      1 2 3 4 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      11 11 11 11 11 6 7 8 9 10
B:      11 6 7 10
C:      1 2 3 4 5 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      11 11 11 11 11 11 7 8 9 10
B:      11 11 7 10
C:      1 2 3 4 5 6 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      11 11 11 11 11 11 11 8 9 10
B:      11 11 8 10
C:      1 2 3 4 5 6 7 -842150451 -842150451 -842150451
---------------------------------------
A:      11 11 11 11 11 11 11 11 9 10
B:      11 11 9 10
C:      1 2 3 4 5 6 7 8 -842150451 -842150451
---------------------------------------
A:      11 11 11 11 11 11 11 11 11 10
B:      11 11 11 10
C:      1 2 3 4 5 6 7 8 9 -842150451
---------------------------------------
A:      11 11 11 11 11 11 11 11 11 11
B:      11 11 11 11
C:      1 2 3 4 5 6 7 8 9 10
Количество сравнений: 83
Количество перемещений: 81
Результат работы сортировки:
        1 2 3 4 5 6 7 8 9 10

-----------------------------------------------

Исходный массив в худшем случае:
        10 9 8 7 6 5 4 3 2 1

A:      10 9 8 7 6 5 4 3 2 1
B:      8 5 2 1
C:      -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 9 8 7 6 5 4 3 2 11
B:      8 5 2 11
C:      1 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 9 8 7 6 5 4 3 11 11
B:      8 5 3 11
C:      1 2 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 9 8 7 6 5 4 11 11 11
B:      8 5 4 11
C:      1 2 3 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 9 8 7 6 5 11 11 11 11
B:      8 5 11 11
C:      1 2 3 4 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 9 8 7 6 11 11 11 11 11
B:      8 6 11 11
C:      1 2 3 4 5 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 9 8 7 11 11 11 11 11 11
B:      8 7 11 11
C:      1 2 3 4 5 6 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 9 8 11 11 11 11 11 11 11
B:      8 11 11 11
C:      1 2 3 4 5 6 7 -842150451 -842150451 -842150451
---------------------------------------
A:      10 9 11 11 11 11 11 11 11 11
B:      9 11 11 11
C:      1 2 3 4 5 6 7 8 -842150451 -842150451
---------------------------------------
A:      10 11 11 11 11 11 11 11 11 11
B:      10 11 11 11
C:      1 2 3 4 5 6 7 8 9 -842150451
---------------------------------------
A:      11 11 11 11 11 11 11 11 11 11
B:      11 11 11 11
C:      1 2 3 4 5 6 7 8 9 10
Количество сравнений: 83
Количество перемещений: 89
Результат работы сортировки:
        1 2 3 4 5 6 7 8 9 10

-----------------------------------------------

Исходный массив в среднем случае:
        -9 -2 4 5 -1 -1 9 2 4 -7

A:      -9 -2 4 5 -1 -1 9 2 4 -7
B:      -9 -1 2 -7
C:      -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 -2 4 5 -1 -1 9 2 4 -7
B:      -2 -1 2 -7
C:      -9 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 -2 4 5 -1 -1 9 2 4 10
B:      -2 -1 2 10
C:      -9 -7 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 10 4 5 -1 -1 9 2 4 10
B:      4 -1 2 10
C:      -9 -7 -2 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 10 4 5 10 -1 9 2 4 10
B:      4 -1 2 10
C:      -9 -7 -2 -1 -842150451 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 10 4 5 10 10 9 2 4 10
B:      4 5 2 10
C:      -9 -7 -2 -1 -1 -842150451 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 10 4 5 10 10 9 10 4 10
B:      4 5 4 10
C:      -9 -7 -2 -1 -1 2 -842150451 -842150451 -842150451 -842150451
---------------------------------------
A:      10 10 10 5 10 10 9 10 4 10
B:      10 5 4 10
C:      -9 -7 -2 -1 -1 2 4 -842150451 -842150451 -842150451
---------------------------------------
A:      10 10 10 5 10 10 9 10 10 10
B:      10 5 9 10
C:      -9 -7 -2 -1 -1 2 4 4 -842150451 -842150451
---------------------------------------
A:      10 10 10 10 10 10 9 10 10 10
B:      10 10 9 10
C:      -9 -7 -2 -1 -1 2 4 4 5 -842150451
---------------------------------------
A:      10 10 10 10 10 10 10 10 10 10
B:      10 10 10 10
C:      -9 -7 -2 -1 -1 2 4 4 5 9
Количество сравнений: 83
Количество перемещений: 82
Результат работы сортировки:
        -9 -7 -2 -1 -1 2 4 4 5 9
*/
