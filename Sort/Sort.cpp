// Мячин Валентин БАС2
#include <iostream>
#include <locale>


void print(int* mas, int n) {
    for (int i = 0; i < n; ++i) {
        std::cout << mas[i] << ' ';
    }
    std::cout << std::endl;
}
void fill_best(int* mas, int n) {
    for (int i = 0; i < n; ++i) {
        mas[i] = i + 1;
    }
}
void fill_worst(int* mas, int n) {
    for (int i = 0; i < n; ++i) {
        mas[i] = n - i;
    }
}
void fill_avg(int* mas, int n) {
    std::srand(std::time(nullptr));
    for (int i = 0; i < n; ++i) {
        mas[i] = rand() % 19 - 9;
    }
}

void SelectionSort(int*& mas, int n) {
    int min;
    int min_i;

    int C = 0;
    int M = 0;

    std::cout << "Процесс сортировки массива:\n";
    for (int i = 0; i < n - 1; ++i) {
        min = mas[i]; // 1st swap
        min_i = i;
        for (int j = i + 1; j < n; ++j) {
            if (mas[j] < min) {
                min = mas[j];
                ++M;
                min_i = j;
            }
            ++C;
        }
        mas[min_i] = mas[i]; // 2nd swap
        mas[i] = min; // 3rd swap

        std::cout << "Шаг " << i + 1 << ": ";
        print(mas, n);

        M += 3;
    }
    std::cout << "Количество сравнений в процессе сортировки: " << C << '\n';
    std::cout << "Количество перестановок в процессе сортировки: " << M << std::endl;
}

void InsertionSort(int*& mas, int n) {
    int i;
    int elem;

    int C = 0;
    int M = 0;

    for (int j = 1; j < n; ++j) {
        i = j - 1;
        elem = mas[j]; ++M;
        ++C;
        while ((i >= 0) && mas[i] > elem) {
            mas[i + 1] = mas[i]; ++M;
            --i;
            ++C;
        }

        mas[i + 1] = elem; ++M;
        std::cout << "Шаг " << j << ": ";
        print(mas, n);
    }
    std::cout << "Количество сравнений в процессе сортировки: " << C << '\n';
    std::cout << "Количество перестановок в процессе сортировки: " << M << std::endl;
}

void Sort(int*& mas, int n) {
    InsertionSort(mas, n);
}

int main() {
    setlocale(LC_ALL, "rus");

    int n;
    std::cout << "n = "; std::cin >> n;
    int* mas = new int [n];

    std::cout << "Исходный массив в лучшем случае:\n\t";
    fill_best(mas, n);
    print(mas, n);
    Sort(mas, n);
    std::cout << "Результат работы сортировки:\n\t";
    print(mas, n);

    std::cout << "\nИсходный массив в худшем случае:\n\t";
    fill_worst(mas, n);
    print(mas, n);
    Sort(mas, n);
    std::cout << "Результат работы сортировки:\n\t";
    print(mas, n);

    std::cout << "\nИсходный массив в среднем случае:\n\t";
    fill_avg(mas, n);
    print(mas, n);
    Sort(mas, n);
    std::cout << "Результат работы сортировки:\n\t";
    print(mas, n);

    delete[] mas;
    return 0;
}
// SelectionSort
/*
Test:
n = 10
Исходный массив в лучшем случае:
	1 2 3 4 5 6 7 8 9 10
Процесс сортировки массива:
Шаг 1: 1 2 3 4 5 6 7 8 9 10
Шаг 2: 1 2 3 4 5 6 7 8 9 10
Шаг 3: 1 2 3 4 5 6 7 8 9 10
Шаг 4: 1 2 3 4 5 6 7 8 9 10
Шаг 5: 1 2 3 4 5 6 7 8 9 10
Шаг 6: 1 2 3 4 5 6 7 8 9 10
Шаг 7: 1 2 3 4 5 6 7 8 9 10
Шаг 8: 1 2 3 4 5 6 7 8 9 10
Шаг 9: 1 2 3 4 5 6 7 8 9 10
Количество сравнений в процессе сортировки: 45
Количество перестановок в процессе сортировки: 27
Результат работы сортировки:
	1 2 3 4 5 6 7 8 9 10

Исходный массив в худшем случае:
	10 9 8 7 6 5 4 3 2 1
Процесс сортировки массива:
Шаг 1: 1 9 8 7 6 5 4 3 2 10
Шаг 2: 1 2 8 7 6 5 4 3 9 10
Шаг 3: 1 2 3 7 6 5 4 8 9 10
Шаг 4: 1 2 3 4 6 5 7 8 9 10
Шаг 5: 1 2 3 4 5 6 7 8 9 10
Шаг 6: 1 2 3 4 5 6 7 8 9 10
Шаг 7: 1 2 3 4 5 6 7 8 9 10
Шаг 8: 1 2 3 4 5 6 7 8 9 10
Шаг 9: 1 2 3 4 5 6 7 8 9 10
Количество сравнений в процессе сортировки: 45
Количество перестановок в процессе сортировки: 52
Результат работы сортировки:
	1 2 3 4 5 6 7 8 9 10

Исходный массив в среднем случае:
	4 5 0 9 8 6 -1 0 -5 1
Процесс сортировки массива:
Шаг 1: -5 5 0 9 8 6 -1 0 4 1
Шаг 2: -5 -1 0 9 8 6 5 0 4 1
Шаг 3: -5 -1 0 9 8 6 5 0 4 1
Шаг 4: -5 -1 0 0 8 6 5 9 4 1
Шаг 5: -5 -1 0 0 1 6 5 9 4 8
Шаг 6: -5 -1 0 0 1 4 5 9 6 8
Шаг 7: -5 -1 0 0 1 4 5 9 6 8
Шаг 8: -5 -1 0 0 1 4 5 6 9 8
Шаг 9: -5 -1 0 0 1 4 5 6 8 9
Количество сравнений в процессе сортировки: 45
Количество перестановок в процессе сортировки: 44
Результат работы сортировки:
	-5 -1 0 0 1 4 5 6 8 9
 */
// InsertionSort
/*
Test:
n = 10
Исходный массив в лучшем случае:
	1 2 3 4 5 6 7 8 9 10
Шаг 1: 1 2 3 4 5 6 7 8 9 10
Шаг 2: 1 2 3 4 5 6 7 8 9 10
Шаг 3: 1 2 3 4 5 6 7 8 9 10
Шаг 4: 1 2 3 4 5 6 7 8 9 10
Шаг 5: 1 2 3 4 5 6 7 8 9 10
Шаг 6: 1 2 3 4 5 6 7 8 9 10
Шаг 7: 1 2 3 4 5 6 7 8 9 10
Шаг 8: 1 2 3 4 5 6 7 8 9 10
Шаг 9: 1 2 3 4 5 6 7 8 9 10
Количество сравнений в процессе сортировки: 9
Количество перестановок в процессе сортировки: 18
Результат работы сортировки:
	1 2 3 4 5 6 7 8 9 10

Исходный массив в худшем случае:
	10 9 8 7 6 5 4 3 2 1
Шаг 1: 9 10 8 7 6 5 4 3 2 1
Шаг 2: 8 9 10 7 6 5 4 3 2 1
Шаг 3: 7 8 9 10 6 5 4 3 2 1
Шаг 4: 6 7 8 9 10 5 4 3 2 1
Шаг 5: 5 6 7 8 9 10 4 3 2 1
Шаг 6: 4 5 6 7 8 9 10 3 2 1
Шаг 7: 3 4 5 6 7 8 9 10 2 1
Шаг 8: 2 3 4 5 6 7 8 9 10 1
Шаг 9: 1 2 3 4 5 6 7 8 9 10
Количество сравнений в процессе сортировки: 54
Количество перестановок в процессе сортировки: 63
Результат работы сортировки:
	1 2 3 4 5 6 7 8 9 10

Исходный массив в среднем случае:
	7 4 1 4 -8 -2 -3 -4 7 -6
Шаг 1: 4 7 1 4 -8 -2 -3 -4 7 -6
Шаг 2: 1 4 7 4 -8 -2 -3 -4 7 -6
Шаг 3: 1 4 4 7 -8 -2 -3 -4 7 -6
Шаг 4: -8 1 4 4 7 -2 -3 -4 7 -6
Шаг 5: -8 -2 1 4 4 7 -3 -4 7 -6
Шаг 6: -8 -3 -2 1 4 4 7 -4 7 -6
Шаг 7: -8 -4 -3 -2 1 4 4 7 7 -6
Шаг 8: -8 -4 -3 -2 1 4 4 7 7 -6
Шаг 9: -8 -6 -4 -3 -2 1 4 4 7 7
Количество сравнений в процессе сортировки: 40
Количество перестановок в процессе сортировки: 49
Результат работы сортировки:
	-8 -6 -4 -3 -2 1 4 4 7 7
 */
